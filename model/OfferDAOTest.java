package model;

import static org.junit.Assert.*;

import java.sql.Date;

import org.junit.Test;

import javafx.collections.ObservableList;
import model.Offer;
import util.DBUtil;
import util.SQLBuilder;

public class OfferDAOTest {

	public void init(){
		try{
			String sqlStmt = SQLBuilder.createTableSQL("offer.txt");
			DBUtil.dbInitTable(sqlStmt);
			
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	public Offer createRecord() {
		Offer s1 = new Offer();
		
		s1.setMemberID(1);
		s1.setSeats(5);
		s1.setCarType("SEDAN");
		s1.setBrand("FORD");
		s1.setModel("GT");
		s1.setTransmission("AUTO");
		s1.setFuelType("DIESEL");
		s1.setPrice(99);
		s1.setPostcode(2000);
		
		return s1;
	}
	

	
	public Member createMemberRecord() {
		Member s1 = new Member();

		// set all fields that aren't generated by the database
		s1.setUserName("member1");
		s1.setPassword("pass2");
		s1.setFirstName("first3");
		s1.setLastName("last4");
		s1.setEmail("email1");
		s1.setPhoneNo(12345678);
		
		// TODO: dates and times require import java.sql.Date and java.sql.Time, not their java.util versions
		s1.setLastMatchDate(new Date(1000,1,1));
		s1.setAccountExpiry(new Date(1000,1,1));
		s1.setCommissionRate(1.0f);
		s1.setCreditCard("kek");
		s1.setHomeAddress("123 fake street");
		
		return s1;
	}
	
	//Test Insert and Find by ID
	@Test
	public void testInsert() {
		OfferDAO offerDAO = new OfferDAO();
		
		try {
			DBUtil.dbInitAllTables();	
			
			Offer s1 = createRecord();
			s1.setOfferID(1);
			offerDAO.insert(s1);
			
			Member m1 = createMemberRecord();
			MemberDAO m2 = new MemberDAO();
			m2.insert(m1);
			
			Offer s2 = offerDAO.findById(1);
			m1 = m2.findById(1);
			
			assertNotNull(s2);
			assertEquals(s2.getOfferID(), 1);
			
			DBUtil.clearTable("OFFER");
			DBUtil.dropTable("OFFER");
			DBUtil.dbShutdown();

		} catch (Exception e) {
			e.printStackTrace();
		}	
	}
	
	@Test
    public void testFindAll() {
        OfferDAO offerDAO = new OfferDAO();

        try {
            DBUtil.dbInitAllTables();

            Offer s1 = createRecord();
            offerDAO.insert(s1);

            ObservableList<Offer> list = offerDAO.findAll();
            assertNotNull(list);


            for (Offer o: list) {
                System.out.println(o.getOfferID());
            }


            DBUtil.clearTable("Offer");
            DBUtil.dropTable("Offer");
            DBUtil.dbShutdown();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
	
	@Test
	public void testDelete() {
		OfferDAO offerDAO = new OfferDAO();
		
		
		try {
			DBUtil.dbInitAllTables();
			
			Offer s1 = createRecord();
			
			final int noRecords = 10;
			
			for (int i = 0; i < noRecords; i++) {
				offerDAO.insert(s1);
			}
			
			ObservableList<Offer> list = offerDAO.findAll();
			assertEquals(list.size(), 10);
			
			offerDAO.delete(("OFFER_ID = 1 OR OFFER_ID = 2"));
			
			list = offerDAO.findAll();
			assertEquals(list.size(), 8);
			
			DBUtil.clearTable("Offer");
            DBUtil.dropTable("Offer");
            DBUtil.dbShutdown();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void testUpdate() {
		OfferDAO offerDAO = new OfferDAO();
		MemberDAO memberDAO = new MemberDAO();
		
		 try {
	            DBUtil.dbInitAllTables();
	            
	            Offer s1 = createRecord();
	            offerDAO.insert(s1);
	            offerDAO.insert(s1);
	            
	            Member m1 = createMemberRecord();
				memberDAO.insert(m1);
				m1.setUserName("lol");
				memberDAO.insert(m1);
	            
	            
	            
	            Offer s2Copy = offerDAO.findById(2);
	            Member m2Copy = memberDAO.findById(2);
	            
	            
	            
				m2Copy.setUserName("member000");
				m2Copy.setPassword("pass2");
				m2Copy.setFirstName("first3");
				m2Copy.setLastName("last4");
				m2Copy.setEmail("email1");
				m2Copy.setPhoneNo(12345678);
				
				m2Copy.setLastMatchDate(new Date(1000,1,1));
				m2Copy.setAccountExpiry(new Date(1000,1,1));
				m2Copy.setCommissionRate(1.0f);
				m2Copy.setCreditCard("kek");
				m2Copy.setHomeAddress("123 fake street");
	            
	            s2Copy.setBrand("LAMBORGHINI");
	            
	            offerDAO.update(s2Copy);
	            
	            assertTrue(offerDAO.findById(2).getBrand().equals("LAMBORGHINI"));
	            
	            DBUtil.clearTable("Offer");
	            DBUtil.dropTable("Offer");
	            DBUtil.dbShutdown();
	            
	            
	} catch (Exception e) {
		e.printStackTrace();
		}
	}
}
	
