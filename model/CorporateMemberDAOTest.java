package model;

import static org.junit.Assert.*;

import java.sql.DriverManager;
import java.sql.Date;

import org.junit.Test;

import javafx.collections.ObservableList;
import util.DBTablePrinter;
import util.DBUtil;
import util.SQLBuilder;

/*
 * Tests coroporate, member and corporateMember DAO functions
 */
public class CorporateMemberDAOTest {

	public void init() {
		try {
			// initialise all tables that your test requires
			// drop them in the "finally" section of testInsert() 
			String dir = "src\\table\\";
			
			String sqlStmt = SQLBuilder.createTableSQL(dir + "corporate.txt");    		    		
			DBUtil.dbInitTable(sqlStmt);
			
			sqlStmt = SQLBuilder.createTableSQL(dir + "member.txt");    		    		
			DBUtil.dbInitTable(sqlStmt);
			
			sqlStmt = SQLBuilder.createTableSQL(dir + "corporateMember.txt");    		    		
			DBUtil.dbInitTable(sqlStmt);
			
		} catch (Exception e) {
			e.printStackTrace();
		}	
	}
	
	public void cleanup() {
		// drop the tables that you initialised here
		try {
			DBUtil.dropTable("CORPORATE_MEMBER");
			DBUtil.dropTable("MEMBER");
			DBUtil.dropTable("CORPORATE");

			DBUtil.dbShutdown();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public Corporate createCorporateRecord() {
		Corporate s1 = new Corporate();

		// set all fields that aren't generated by the database
		s1.setCompanyName("company1");
		s1.setCompanyAddr("123 fake street");
		s1.setCompanyPhoneNumber(123456789);
		s1.setCompanyPCode(2222);
		s1.setCustomerType(1);
				
		return s1;
	}
	
	public CorporateMember createCorporateMemberRecord() {
		CorporateMember s1 = new CorporateMember();

		// set all fields that aren't generated by the database
		s1.setFirstName("corporateMember1");
		s1.setUserName("corporateMember1");
		s1.setCreditCard("kek");
		
		return s1;
	}
	
	public Member createMemberRecord() {
		Member s1 = new Member();

		// set all fields that aren't generated by the database
		s1.setUserName("member1");
		s1.setPassword("pass2");
		s1.setFirstName("first3");
		s1.setLastName("last4");
		s1.setEmail("email1");
		s1.setPhoneNo(12345678);
		
		// TODO: dates and times require import java.sql.Date and java.sql.Time, not their java.util versions
		s1.setLastMatchDate(new Date(1000,1,1));
		s1.setAccountExpiry(new Date(1000,1,1));
		s1.setCommissionRate(1.0f);
		s1.setCreditCard("kek");
		s1.setHomeAddress("123 fake street");
		
		return s1;
	}
	
	@Test
	public void testInsert() {
		CorporateMemberDAO corporateMemberDAO = new CorporateMemberDAO();
		CorporateDAO corporateDAO = new CorporateDAO();
		MemberDAO memberDAO = new MemberDAO();
		
		try {
			// set up tables
			init();
			
			// make and insert a corporate record
			Corporate c1 = createCorporateRecord();
			corporateDAO.insert(c1);
			
			// make and insert a member record
			Member m1 = createMemberRecord();
			memberDAO.insert(m1);
			
			c1 = corporateDAO.findById(1);
			m1 = memberDAO.findById(1);
			
			// print tables to check records have been inserted
		    String url = "jdbc:derby:DBforDEMO;create=true";
			DBTablePrinter.printTable(DriverManager.getConnection(url, "demo", "demo"), "MEMBER");
			DBTablePrinter.printTable(DriverManager.getConnection(url, "demo", "demo"), "CORPORATE");
			DBTablePrinter.printTable(DriverManager.getConnection(url, "demo", "demo"), "CORPORATE_MEMBER");
			
			// insert a corporateMember record
			corporateMemberDAO.insert(m1, c1);
			
			// print tables to check records have been inserted
			DBTablePrinter.printTable(DriverManager.getConnection(url, "demo", "demo"), "CORPORATE_MEMBER");
		} catch (Exception e) {
			
			e.printStackTrace();
			
		// clean up here
		} finally {
			cleanup();
		}
	}
	
	@Test
	public void testFindAll() {
		CorporateDAO corporateMemberDAO = new CorporateDAO();
				
		try {
			init();
			
			Corporate s1 = createCorporateRecord();
			final int noRecords = 10;
			
			// insert 10 records into the corporate table
			for (int i = 0; i < noRecords; i++) {
				corporateMemberDAO.insert(s1);
			}
							
			// use findAll to retrieve them
			ObservableList<Corporate> list = corporateMemberDAO.findAll();
			
			// check that there are 10 records in the list
			assertEquals(list.size(), 10);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			cleanup();
		}
	}
	
	@Test
	public void testDelete() {
		CorporateDAO corporateMemberDAO = new CorporateDAO();
				
		try {
			init();

			Corporate s1 = createCorporateRecord();
			
			// change this if you want to test a different number of records to insert
			final int noRecords = 10;
			
			// insert 10 records into the corporate table
			for (int i = 0; i < noRecords; i++) {
				corporateMemberDAO.insert(s1);
			}
				
			// make sure there are 10 records in the table
			ObservableList<Corporate> list = corporateMemberDAO.findAll();
			assertEquals(list.size(), 10);
			
			// delete some records -- expect 2 records to be deleted since Corporate_id is unique
			corporateMemberDAO.delete("Corporate_id=1 OR Corporate_id=2");
			
			// check that there are 8 records left
			list = corporateMemberDAO.findAll();
			assertEquals(list.size(), 8);


		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			cleanup();
		}
	}
	
	@Test
	public void testUpdate() {
		CorporateDAO corporateMemberDAO = new CorporateDAO();
		MemberDAO memberDAO = new MemberDAO();
				
		try {
			init();

			// create a record and insert it twice
			Corporate s1 = createCorporateRecord();
			corporateMemberDAO.insert(s1);
			corporateMemberDAO.insert(s1);
			
			Member m1 = createMemberRecord();
			memberDAO.insert(m1);
			m1.setUserName("lol");
			memberDAO.insert(m1);

			// edit the details of the 2nd record in the table
			Corporate s2Copy = corporateMemberDAO.findById(2);	
			Member m2Copy = memberDAO.findById(2);
			
			// test that you can update all non-database generated fields in your table
			
			// corporate
			s2Copy.setCompanyName("company1");
			s2Copy.setCompanyAddr("123 fake street");
			s2Copy.setCompanyPhoneNumber(123456789);
			s2Copy.setCompanyPCode(2222);
			s2Copy.setCustomerType(1);
			
			// member
			m2Copy.setUserName("member000");
			m2Copy.setPassword("pass2");
			m2Copy.setFirstName("first3");
			m2Copy.setLastName("last4");
			m2Copy.setEmail("email1");
			m2Copy.setPhoneNo(12345678);
			
			// TODO: dates and times require import java.sql.Date and java.sql.Time, not their java.util versions
			m2Copy.setLastMatchDate(new Date(1000,1,1));
			m2Copy.setAccountExpiry(new Date(1000,1,1));
			m2Copy.setCommissionRate(1.0f);
			m2Copy.setCreditCard("kek");
			m2Copy.setHomeAddress("123 fake street");
			
			// print the "before" update table
			String url = "jdbc:derby:DBforDEMO;create=true";
			DBTablePrinter.printTable(DriverManager.getConnection(url, "demo", "demo"), "CORPORATE");
			
			// update the record in corporate table
			corporateMemberDAO.update(s2Copy);
			
			// print the "after" update table -- compare the two tables printed to see if update worked
			DBTablePrinter.printTable(DriverManager.getConnection(url, "demo", "demo"), "CORPORATE");
			
			// print "before"
			DBTablePrinter.printTable(DriverManager.getConnection(url, "demo", "demo"), "CORPORATE");
			
			// update the record in member table
			memberDAO.update(m2Copy);
			
			// print "after" -- compare the two tables printed to see if update worked
			DBTablePrinter.printTable(DriverManager.getConnection(url, "demo", "demo"), "CORPORATE");
		
		} catch (Exception e) {
			
			e.printStackTrace();
			
		} finally {
			cleanup();
		}
	}
}
